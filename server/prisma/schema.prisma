generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Companies {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  description   String
  logo          String?
  linkedin      String?
  employees_num Int?
  web_site      String?
  jobs          Jobs[]
  created_at    DateTime @default(now())

  @@map("companies")
}

model Jobs {
  id           String        @id @default(uuid())
  company_id   String
  title        String
  description  String
  technologies String[]
  candidates   JobsOnUsers[]
  level        String
  location     String?
  home_office  Boolean
  open         Boolean       @default(true)
  created_at   DateTime      @default(now())
  companies    Companies?    @relation(fields: [company_id], references: [id])

  @@map("jobs")
}

model User {
  id                String               @id @default(uuid())
  email             String               @unique
  password          String
  name              String
  birthday          String
  pic               String?
  about             String?
  salary_pretension Int?
  github            String?
  linkedin          String?
  phone             String?
  headline          String?
  country           String?
  city              String?
  languages         String[]
  level             String?
  skills            String[]
  resume            String?
  education         UserEducation[]
  certifications    UserCertifications[]
  experiences       UserExperiences[]
  jobs              JobsOnUsers[]
  created_at        DateTime             @default(now())

  @@map("user")
}

model UserExperiences {
  id          String   @id @default(uuid())
  user_id     String
  title       String
  company     String
  location    String
  current     Boolean
  start_month Int
  start_year  Int
  end_month   Int?
  end_year    Int?
  user        User?    @relation(fields: [user_id], references: [id])
  created_at  DateTime @default(now())

  @@map("user_experiences")
}

model UserCertifications {
  id           String   @id @default(uuid())
  user_id      String
  name         String
  organization String
  description  String?
  issued_month Int
  issued_year  Int
  User         User?    @relation(fields: [user_id], references: [id])
  created_at   DateTime @default(now())

  @@map("user_certifications")
}

model UserEducation {
  id          String   @id @default(uuid())
  user_id     String
  school      String
  degree      String
  field       String
  start_month Int
  start_year  Int
  end_month   Int
  end_year    Int
  grade       String
  activities  String?
  description String?
  created_at  DateTime @default(now())
  User        User?    @relation(fields: [user_id], references: [id])

  @@map("user_education")
}

model JobsOnUsers {
  id         String   @id @default(uuid())
  jobs       Jobs     @relation(fields: [jobs_id], references: [id])
  users      User     @relation(fields: [user_id], references: [id])
  jobs_id    String
  user_id    String
  created_at DateTime @default(now())

  @@map("jobs_on_users")
}
